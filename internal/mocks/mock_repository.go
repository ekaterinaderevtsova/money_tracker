// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/repository.go -destination=internal/mocks/mock_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "moneytracker/internal/domain"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockICurrentSpendingRepository is a mock of ICurrentSpendingRepository interface.
type MockICurrentSpendingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICurrentSpendingRepositoryMockRecorder
	isgomock struct{}
}

// MockICurrentSpendingRepositoryMockRecorder is the mock recorder for MockICurrentSpendingRepository.
type MockICurrentSpendingRepositoryMockRecorder struct {
	mock *MockICurrentSpendingRepository
}

// NewMockICurrentSpendingRepository creates a new mock instance.
func NewMockICurrentSpendingRepository(ctrl *gomock.Controller) *MockICurrentSpendingRepository {
	mock := &MockICurrentSpendingRepository{ctrl: ctrl}
	mock.recorder = &MockICurrentSpendingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICurrentSpendingRepository) EXPECT() *MockICurrentSpendingRepositoryMockRecorder {
	return m.recorder
}

// AddSpending mocks base method.
func (m *MockICurrentSpendingRepository) AddSpending(ctx context.Context, payload *domain.DaySpendings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSpending", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSpending indicates an expected call of AddSpending.
func (mr *MockICurrentSpendingRepositoryMockRecorder) AddSpending(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSpending", reflect.TypeOf((*MockICurrentSpendingRepository)(nil).AddSpending), ctx, payload)
}

// FlushAll mocks base method.
func (m *MockICurrentSpendingRepository) FlushAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushAll indicates an expected call of FlushAll.
func (mr *MockICurrentSpendingRepositoryMockRecorder) FlushAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushAll", reflect.TypeOf((*MockICurrentSpendingRepository)(nil).FlushAll), ctx)
}

// GetWeekSpendings mocks base method.
func (m *MockICurrentSpendingRepository) GetWeekSpendings(ctx context.Context, week []string) (*domain.WeekSpendings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeekSpendings", ctx, week)
	ret0, _ := ret[0].(*domain.WeekSpendings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeekSpendings indicates an expected call of GetWeekSpendings.
func (mr *MockICurrentSpendingRepositoryMockRecorder) GetWeekSpendings(ctx, week any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeekSpendings", reflect.TypeOf((*MockICurrentSpendingRepository)(nil).GetWeekSpendings), ctx, week)
}

// InitNewWeek mocks base method.
func (m *MockICurrentSpendingRepository) InitNewWeek(ctx context.Context, week []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitNewWeek", ctx, week)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitNewWeek indicates an expected call of InitNewWeek.
func (mr *MockICurrentSpendingRepositoryMockRecorder) InitNewWeek(ctx, week any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitNewWeek", reflect.TypeOf((*MockICurrentSpendingRepository)(nil).InitNewWeek), ctx, week)
}

// MockIArchiveSpendingRepository is a mock of IArchiveSpendingRepository interface.
type MockIArchiveSpendingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIArchiveSpendingRepositoryMockRecorder
	isgomock struct{}
}

// MockIArchiveSpendingRepositoryMockRecorder is the mock recorder for MockIArchiveSpendingRepository.
type MockIArchiveSpendingRepositoryMockRecorder struct {
	mock *MockIArchiveSpendingRepository
}

// NewMockIArchiveSpendingRepository creates a new mock instance.
func NewMockIArchiveSpendingRepository(ctrl *gomock.Controller) *MockIArchiveSpendingRepository {
	mock := &MockIArchiveSpendingRepository{ctrl: ctrl}
	mock.recorder = &MockIArchiveSpendingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIArchiveSpendingRepository) EXPECT() *MockIArchiveSpendingRepositoryMockRecorder {
	return m.recorder
}

// AddSpending mocks base method.
func (m *MockIArchiveSpendingRepository) AddSpending(ctx context.Context, payload *domain.DaySpendings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSpending", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSpending indicates an expected call of AddSpending.
func (mr *MockIArchiveSpendingRepositoryMockRecorder) AddSpending(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSpending", reflect.TypeOf((*MockIArchiveSpendingRepository)(nil).AddSpending), ctx, payload)
}

// GetWeekSpendings mocks base method.
func (m *MockIArchiveSpendingRepository) GetWeekSpendings(ctx context.Context, date time.Time) (*domain.WeekSpendings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeekSpendings", ctx, date)
	ret0, _ := ret[0].(*domain.WeekSpendings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeekSpendings indicates an expected call of GetWeekSpendings.
func (mr *MockIArchiveSpendingRepositoryMockRecorder) GetWeekSpendings(ctx, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeekSpendings", reflect.TypeOf((*MockIArchiveSpendingRepository)(nil).GetWeekSpendings), ctx, date)
}
